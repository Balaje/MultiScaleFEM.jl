######################################################################
# File containing the definition of the FESpaces used in the problem #
######################################################################
using LinearAlgebra
using ForwardDiff
using FastGaussQuadrature
using SparseArrays

abstract type FiniteElementSpace <: Any end

"""
mutable struct H¬πConforming <: FiniteElementSpace
  trian::MeshType
  p::Int64
  œïÃÇ::Function
  nodes::AbstractVector{Float64}
  elem::Matrix{Int64}
  dirchletNodes::Vector{Int64}
end

- Structure to build the H¬π Conforming space of order p.
- The basis function œïÃÇ(x,p) is defined on the reference element (-1,1)
"""
mutable struct H¬πConforming <: FiniteElementSpace
  trian::MeshType
  p::Int64
  basis::Function
  nodes::AbstractVector{Float64}
  dirichletNodes::Vector{Int64}
end
function H¬πConforming(trian::T, p::Int64, dNodes::Vector{Int64}) where T<:MeshType
  function œïÃÇ(xÃÇ)
    xq = LinRange(-1,1,p+1)
    Q = [xq[i]^j for i=1:p+1, j=0:p]
    A = Q\(I(p+1))
    A'*[xÃÇ^i for i=0:p]
  end
  h = trian.H/p
  nodes = trian.nds[1]:h:trian.nds[end]
  H¬πConforming(trian,p,œïÃÇ,nodes,dNodes)
end

"""
mutable struct L¬≤Conforming <: FiniteElementSpace
  trian::MeshType
  p::Int64
  Œõ‚Çñ·µñ::Function
  nodes::AbstractVector{Float64}
  elem::Matrix{Int64}
end

- Structure to build the L¬≤ Conforming space of order p.
- The basis function Œõ‚Çñ·µñ is defined on the reference element (-1,1)
- The basis functions are Legendre polynomials.
"""
mutable struct L¬≤Conforming <: FiniteElementSpace
  trian::MeshType
  p::Int64
  basis::Function
  nodes::AbstractVector{Float64}  
end
function L¬≤Conforming(trian::T, p::Int64) where T<:MeshType
  function Œõ‚Çñ·µñ(x)
    if (p==0)
      return [1.0]
    elseif(p==1)
      return [1.0, x]
    else
      res = Vector{Float64}(undef, p+1)
      fill!(res,0.)
      res[1] = 1.0
      res[2] = x[1]
      res[3:end] = [(2j-1)/(j)*x*res[j] + (1-j)/(j)*res[j-1] for j=2:p]
      return res
    end
  end
  h = trian.H/p
  nodes = trian.nds[1]:h:trian.nds[end]
  L¬≤Conforming(trian,p,Œõ‚Çñ·µñ,nodes)
end

function get_trian(fespace::T) where T<:FiniteElementSpace
  fespace.trian
end

"""
mutable struct RÀ°‚Çï{T<:FiniteElementSpace} <: Any
    nds
    els::Matrix{Int64}
    Œõ‚Éó::Vector{Float64}
    Œª‚Éó::Vector{Float64}
end
"""
mutable struct RÀ°‚Çï{T<:FiniteElementSpace} <: Any
  nds::AbstractVector{Float64}
  Œõ::Vector{Float64}
  Œª::Vector{Float64}
  U::T
end
function RÀ°‚Çï(Œõ‚Çñ::Function, A::Function, Us::Tuple{T1,T2}, MatAssems::VecOrMat{MatrixAssembler}, 
    VecAssems::VecOrMat{VectorAssembler}; qorder=3) where {T1<:FiniteElementSpace, T2<:FiniteElementSpace}
  U,V = Us
  K‚Çê, L‚Çê = MatAssems
  F‚Çê, = VecAssems
  nodes = U.nodes
  # Collect the free-nodes
  tn = 1:length(nodes)
  bn = U.dirichletNodes
  fn = setdiff(tn,bn)
  # Use the assemblers and assemble the system
  ~,KK = assemble_matrix(U, K‚Çê, A; qorder=qorder)
  LL = assemble_matrix(U, V, L‚Çê, x->1; qorder=qorder)
  FF = assemble_vector(V, F‚Çê, Œõ‚Çñ; qorder=qorder)
  K = KK[fn,fn]; L = LL[fn,:]; L·µÄ = L'; F = FF
  A = [K L; L·µÄ spzeros(size(L,2), size(L,2))]
  b = Vector{Float64}(undef, length(fn)+length(F))  
  dropzeros!(A)  
  fill!(b,0.0)
  b[length(fn)+1:end] = F
  sol = A\b
  X = sol[1:length(fn)]
  Y = sol[length(fn)+1:end]
  RÀ°‚Çï(nodes, vcat(0,X,0), Y, U)
end
"""
mutable struct MultiScale <: FiniteElementSpace
  ùíØ::MeshType
  bgSpace::L¬≤Conforming
  ŒõÃÉ‚Çñ·µñs::Matrix{RÀ°‚Çï}
  elem::Vector{Vector{Int64}}
end
"""
mutable struct MultiScale <: FiniteElementSpace
  trian::MeshType
  bgSpace::L¬≤Conforming
  ŒõÃÉ‚Çñ·µñs::Matrix{RÀ°‚Çï}
  elem::Vector{Vector{Int64}}
end
"""
Value of the multiscale basis at x:
(1) Accepts the basis FEM solution and returns the value at x
"""
function ŒõÃÉ‚ÇñÀ°(x, R::RÀ°‚Çï)
  nds = R.nds; elem=R.els; uh = R.Œõ;
  @assert R.U isa H¬πConforming
  new_elem = R.U.elem  
  nel = size(elem,1)
  for i=1:nel    
    uh_elem = uh[new_elem[i,:]]
    nds_elem = nds[elem[i,:]]
    hl = nds_elem[2]-nds_elem[1]
    if(nds_elem[1] ‚â§ x ‚â§ nds_elem[2])
      xÃÇ = -(nds_elem[2]+nds_elem[1])/hl + (2/hl)*x
      return dot(uh_elem, U.œïÃÇ(xÃÇ))
    else
      continue
    end
  end
end
"""
Gradient of the multiscale bases at x
(1) Accepts the basis FEM solution and returns the value at x
"""
function ‚àáŒõÃÉ‚ÇñÀ°(x, R::RÀ°‚Çï)
  nds = R.nds; elem=R.els; uh = R.Œõ‚Éó;
  @assert R.U isa H¬πConforming
  new_elem = R.U.elem  
  nel = size(elem,1)
  for i=1:nel    
    uh_elem = uh[new_elem[i,:]]
    nds_elem = nds[elem[i,:]]
    hl = nds_elem[2]-nds_elem[1]
    if(nds_elem[1] ‚â§ x ‚â§ nds_elem[2])
      xÃÇ = -(nds_elem[2]+nds_elem[1])/hl + (2/hl)*x
      return dot(uh_elem, ‚àá(œïÃÇ,xÃÇ))*(2/hl)
    else
      continue
    end
  end
end
"""
‚àá(œï, x)Function to obtain the gradient of the function œï
"""
function ‚àá(œï::Function, x)
  p = length(œï(x))-1
  res = Vector{Float64}(undef,p+1)
  fill!(res,0.0)
  for i=1:p+1
    œï·µ¢(y) = œï(y)[i]
    res[i] = ForwardDiff.derivative(œï·µ¢,x)
  end
  res
end
