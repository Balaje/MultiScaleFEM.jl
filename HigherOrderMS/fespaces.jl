######################################################################
# File containing the definition of the FESpaces used in the problem #
######################################################################
using LinearAlgebra
using ForwardDiff
using FastGaussQuadrature
using SparseArrays

abstract type FiniteElementSpace <: Any end
"""
‚àá(œï, x)Function to obtain the gradient of the function œï
"""
function ‚àá(œï::Function, x)
  p = length(œï(x))-1
  res = Vector{Float64}(undef,p+1)
  fill!(res,0.0)
  for i=1:p+1
    œï·µ¢(y) = œï(y)[i]
    res[i] = ForwardDiff.derivative(œï·µ¢,x)
  end
  res
end

"""
mutable struct H¬πConforming <: FiniteElementSpace
  trian::MeshType
  p::Int64
  œïÃÇ::Function
  nodes::AbstractVector{Float64}
  elem::Matrix{Int64}
  dirchletNodes::Vector{Int64}
end

- Structure to build the H¬π Conforming space of order p.
- The basis function œïÃÇ(x,p) is defined on the reference element (-1,1)
"""
mutable struct H¬πConforming <: FiniteElementSpace
  trian::MeshType
  p::Int64
  basis::Function
  nodes::AbstractVector{Float64}
  dirichletNodes::Vector{Int64}
  new_elem::Matrix{Int64}
end
function H¬πConforming(trian::T, p::Int64, dNodes::Vector{Int64}) where T<:MeshType
  function œïÃÇ(xÃÇ)
    xq = LinRange(-1,1,p+1)
    Q = [xq[i]^j for i=1:p+1, j=0:p]
    A = Q\(I(p+1))
    A'*[xÃÇ^i for i=0:p]
  end
  h = trian.H/p
  nodes = trian.nds[1]:h:trian.nds[end]
  new_elem = _new_elem_matrices(trian.elems, p, H¬πConformingSpace())
  H¬πConforming(trian,p,œïÃÇ,nodes,dNodes,new_elem)
end

"""
mutable struct L¬≤Conforming <: FiniteElementSpace
  trian::MeshType
  p::Int64
  Œõ‚Çñ·µñ::Function
  nodes::AbstractVector{Float64}
  elem::Matrix{Int64}
end

- Structure to build the L¬≤ Conforming space of order p.
- The basis function Œõ‚Çñ·µñ is defined on the reference element (-1,1)
- The basis functions are Legendre polynomials.
"""
mutable struct L¬≤Conforming <: FiniteElementSpace
  trian::MeshType
  p::Int64
  basis::Function
  nodes::AbstractVector{Float64}
  new_elem::Matrix{Int64}
end
function L¬≤Conforming(trian::T, p::Int64) where T<:MeshType
  function Œõ‚Çñ·µñ(x)
    if (p==0)
      return [1.0]
    elseif(p==1)
      return [1.0, x]
    else
      res = Vector{Float64}(undef, p+1)
      fill!(res,0.)
      res[1] = 1.0
      res[2] = x
      for j=2:p
        res[j+1] = (2j-1)/(j)*x*res[j] - (j-1)/(j)*res[j-1]
      end
      return res
    end
  end
  h = trian.H/p
  nodes = trian.nds[1]:h:trian.nds[end]
  new_elem = _new_elem_matrices(trian.elems, p, L¬≤ConformingSpace())
  L¬≤Conforming(trian,p,Œõ‚Çñ·µñ,nodes,new_elem)
end

function get_trian(fespace::T) where T<:FiniteElementSpace
  fespace.trian
end

"""
mutable struct RÀ°‚Çï{T<:FiniteElementSpace} <: Any
    nds
    els::Matrix{Int64}
    Œõ‚Éó::Vector{Float64}
    Œª‚Éó::Vector{Float64}
end
"""
mutable struct RÀ°‚Çï{T<:FiniteElementSpace} <: Any
  nds::AbstractVector{Float64}
  Œõ::Vector{Float64}
  Œª::Vector{Float64}
  U::T
end
function RÀ°‚Çï(Œõ‚Çñ::Function, A::Function, M::Function, Us::Tuple{T1,T2}, MatAssems::VecOrMat{MatrixAssembler},
             VecAssems::VecOrMat{VectorAssembler}; qorder=3) where {T1<:FiniteElementSpace, T2<:FiniteElementSpace}
  U,V = Us
  K‚Çê, L‚Çê = MatAssems
  F‚Çê, = VecAssems
  nodes = U.nodes
  # Collect the free-nodes
  tn = 1:length(nodes)
  bn = U.dirichletNodes
  fn = setdiff(tn,bn)
  # Use the assemblers and assemble the system
  _,KK = assemble_matrix(U, K‚Çê, A, M; qorder=qorder)
  LL = assemble_matrix(U, V, L‚Çê, x->1.0; qorder=qorder)
  FF = assemble_vector(V, F‚Çê, Œõ‚Çñ; qorder=qorder)
  @show FF
  K = KK[fn,fn]; L = LL[fn,:]; L·µÄ = L'; F = FF
  A = [K L; L·µÄ spzeros(size(L,2), size(L,2))]
  # b = Vector{Float64}(undef, length(fn)+length(F))
  b = Vector{Float64}(undef, size(A,1))
  dropzeros!(A)
  fill!(b,0.0)
  b[length(fn)+1:end] = F
  sol = A\b
  X = sol[1:length(fn)]
  Y = sol[length(fn)+1:end]
  RÀ°‚Çï(nodes, vcat(0,X,0), Y, U)
end
"""
Value of the multiscale basis at x:
(1) Accepts the basis FEM solution and returns the value at x
"""
function ŒõÃÉÀ°‚Çö(x::Float64, R::RÀ°‚Çï, V::A; num_neighbours=2) where A <: H¬πConforming
  Œ© = V.trian
  elem = Œ©.elems
  new_elem = V.new_elem
  nds = Œ©.nds
  nel = size(elem,1)
  tree = Œ©.tree
  idx, = knn(tree, [x], num_neighbours, true)
  elem_indx = -1
  for i in idx
    (i ‚â• nel) && (i=nel) # Finds last point
    interval = nds[elem[i,:]]
    difference = interval .- x
    (difference[1]*difference[2] ‚â§ 0) ? begin elem_indx = i; break; end : continue
  end
  (elem_indx == -1) && return 0.0
  uh = R.Œõ[new_elem[elem_indx,:]]
  cs = nds[elem[elem_indx,:]]
  xÃÇ = -(cs[1]+cs[2])/(cs[2]-cs[1]) + 2/(cs[2]-cs[1])*x
  res = dot(uh,V.basis(xÃÇ))
  res
end
"""
Gradient of the multiscale bases at x
(1) Accepts the basis FEM solution and returns the value at x
"""
function ‚àáŒõÃÉÀ°‚Çö(x::Float64, R::RÀ°‚Çï, V::A; num_neighbours=2) where A <: H¬πConforming
  Œ© = V.trian
  p = V.p
  elem = Œ©.elems
  new_elem = V.new_elem
  nds = Œ©.nds
  nel = size(elem,1)
  tree = Œ©.tree
  idx, = knn(tree, [x], num_neighbours, true)
  elem_indx = -1
  for i in idx
    (i ‚â• nel) && (i=nel) # Finds last point
    interval = nds[elem[i,:]]
    difference = interval .- x
    (difference[1]*difference[2] ‚â§ 0) ? begin elem_indx = i; break; end : continue
  end
  (elem_indx == -1) && return 0.0
  uh = R.Œõ[new_elem[elem_indx,:]]
  cs = nds[elem[elem_indx,:]]
  xÃÇ = -(cs[1]+cs[2])/(cs[2]-cs[1]) + 2/(cs[2]-cs[1])*x  
  œï·µ¢(x) = V.basis(x)
  ‚àáœï·µ¢ = ‚àá(œï·µ¢,xÃÇ)*2/(cs[2]-cs[1])
  res = dot(uh, ‚àáœï·µ¢)
  res
end

######### ######### ######### ######### ######### ######### 
######### Definition of the Multiscale space #### #########
######### ######### ######### ######### ######### ######### 
"""
mutable struct MultiScale <: FiniteElementSpace
  ùíØ::MeshType
  bgSpace::L¬≤Conforming
  ŒõÃÉ‚Çñ·µñs::Matrix{RÀ°‚Çï}
  elem::Vector{Vector{Int64}}
end
"""
mutable struct MultiScale <: FiniteElementSpace
  trian::MeshType
  l::Int64
  bgSpace::L¬≤Conforming
  basis::Matrix{RÀ°‚Çï}
  nodes::AbstractVector{Float64}
  dNodes::Vector{Int64}
  new_elem::Matrix{Int64}
end
"""
Function to build the Multiscale space
"""
function MultiScale(trian::T, A::Function, fespace::Tuple{Int,Int}, l::Int64, dNodes::Vector{Int64}; Nfine=100, qorder=3) where T<:MeshType
  nel = size(trian.elems,1)
  q,p = fespace
  patch = ((2l+1)*(p+1) < nel*(p+1)) ? trian[1:2l+1] : trian
  patch_mesh = ùíØ((patch.nds[1], patch.nds[end]), Nfine)
  new_elems = _new_elem_matrices(trian.elems, p, l, MultiScaleSpace())
  K‚Çê = MatrixAssembler(H¬πConformingSpace(), q, patch_mesh.elems)
  L‚Çê = MatrixAssembler(H¬πConformingSpace(), L¬≤ConformingSpace(), (q,p), (patch_mesh.elems, patch.elems))
  F‚Çê = VectorAssembler(L¬≤ConformingSpace(), p, patch.elems)  
  R‚Çõ = Matrix{RÀ°‚Çï}(undef,p+1,nel)
  compute_basis_functions!(R‚Çõ, trian, A, fespace, [K‚Çê,L‚Çê], [F‚Çê], l; qorder=qorder, Nfine=Nfine)
  bgSpace = L¬≤Conforming(trian, p)
  nodes = bgSpace.nodes
  MultiScale(trian, l, bgSpace, R‚Çõ, nodes, dNodes, new_elems)
end 
"""
Evaluate the multiscale function at a point
"""
function u‚Çò‚Çõ(x::Float64, sol::Vector{Float64}, U::T; num_neighbours=2) where T<:MultiScale
  Œ© = U.trian
  elem = Œ©.elems
  new_els = U.new_elem
  nds = Œ©.nds
  nel = size(elem,1)
  tree = Œ©.tree
  idx, = knn(tree, [x], num_neighbours, true)
  elem_indx = -1
  for i in idx
    (i ‚â• nel) && (i=nel) # Finds last point
    interval = nds[elem[i,:]]
    difference = interval .- x
    (difference[1]*difference[2] ‚â§ 0) ? begin elem_indx = i; break; end : continue
  end
  (elem_indx == -1) && return 0
  uh = sol[new_els[elem_indx,:]]
  b_inds = new_els[elem_indx,:]
  œï·µ¢ = map(i->ŒõÃÉÀ°‚Çö(x, U.basis[i], U.basis[i].U; num_neighbours=num_neighbours), b_inds)
  res = dot(uh, œï·µ¢)
  res
end 