using Plots

include("meshes.jl");
include("fespaces.jl");
include("assemblers.jl");
include("local_matrix_vector.jl")
include("assemble_matrices.jl")
include("solve_local_problems.jl");

A(x) = @. 1
#Œµ = 2^-5
#A(x) = @. (2 + cos(2œÄ*x/Œµ))^-1

p = 1
q = 1
l = 1
nel_patch = 2l+1 
nel_coarse = 5
nel_fine = 100
# Precompute the assembly matrix for the patch, nel = 2*l + 1 using a dummy mesh
mesh_coarse = ùíØ((0,0.6),2l+1) # nel = 2l+1
mesh_fine = ùíØ((0,0.6),nel_fine)
U = L¬≤Conforming(mesh_coarse,p); # Coarse
V = H¬πConforming(mesh_fine,q,[1,nel_fine+1]); # Fine
# Get the assembly strategies
K‚Çê = MatrixAssembler(H¬πConformingSpace(), q, V.elem)
L‚Çê = MatrixAssembler(H¬πConformingSpace(), L¬≤ConformingSpace(), (q,p), (V.elem, U.elem))
F‚Çê = VectorAssembler(L¬≤ConformingSpace(), p, U.elem)

# Now to compute the new basis functions
function B‚Çñ(x,nds)
    a,b=nds
    xÃÇ = -(a+b)/(b-a) + 2/(b-a)*x
    (a ‚â§ x ‚â§ b) ? U.basis(xÃÇ) : zeros(Float64,U.p+1)
  end
R = RÀ°‚Çï(y->B‚Çñ(y,(0.2,0.4))[2], A, (V,U), [K‚Çê,L‚Çê], [F‚Çê]; qorder=10)
#R = RÀ°‚Çï(y->1, A, (V,U), [K‚Çê,L‚Çê], [F‚Çê]; qorder=10)
# function compute_ms_basis(patch::A, fine_mesh::B,
#                assem_coarse::MatrixVectorAssembler, assem_fine::MatrixVectorAssembler) where {A<:MeshType, B<:MeshType}
#   els
#   nel = size(els,1)
#   RÀ°‚ÇïB‚Çñ = Matrix{RÀ°‚Çï}(undef,nel,p+1)
#   for k=1:nel
#     elcoords = (nodes[els[k,1]],nodes[els[k,2]])
#     start = (k-l)>0 ? k-l : 1
#     last = (k+l)<nel ? k+l : nel
#     for i=1:p+1
#       Œõ‚Çñ(y) = B‚Çñ(y, p, elcoords)[i]
#       new_nodes = nodes[els[start,1]:els[last,2]]
#       new_elems = els[start:last,:]
#       new_elems = new_elems .- (minimum(new_elems)-1)
#       RÀ°‚ÇïB‚Çñ[k,i] = RÀ°‚Çï(Œõ‚Çñ, A,
#                       new_nodes, new_elems;
#                       fespace=fespace, N=Nfine, qorder=qorder)
#     end
#   end
# RÀ°‚ÇïB‚Çñ
# end
# Rs = Matrix{RÀ°‚Çï}(undef, nel_coarse, p+1) 
# # using BenchmarkTools
# # @btime RÀ°‚Çï(y->B‚Çñ(y,(0.2,0.4))[2], A, assem‚ÇÅ, assem‚ÇÇ; qorder=3)
# plt = plot(R.nds, R.Œõ)
# xlims!(plt, (0,1))
