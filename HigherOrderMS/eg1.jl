using Plots

include("meshes.jl");
include("fespaces.jl");
include("assemblers.jl");
include("local_matrix_vector.jl")
include("assemble_matrices.jl")
include("solve_local_problems.jl");

#A(x) = @. 1
Œµ = 2^-6
A(x) = @. (2 + cos(2œÄ*x/Œµ))^-1

p = 1
q = 1
l = 1
n = 5
n‚Çö = 100
Œ© = ùíØ((0,1),n) 

# - Pre-Compute the assembler using the first patch size. 
# - The patch size remains constant in the local problems
patch = Œ©[1:2l+1]
patch_mesh = ùíØ((patch.nds[1], patch.nds[end]), n‚Çö)
K‚Çê = MatrixAssembler(H¬πConformingSpace(), q, patch_mesh.elems)
L‚Çê = MatrixAssembler(H¬πConformingSpace(), L¬≤ConformingSpace(), (q,p), (patch_mesh.elems, patch.elems))
F‚Çê = VectorAssembler(L¬≤ConformingSpace(), p, patch.elems)

# Now to compute the new basis functions on a patch
function compute_basis_functions!(
    R‚Çõ::Vector{Vector{RÀ°‚Çï}}, 
    Œ©::T, A::Function, fespace, MatAssems::Vector{MatrixAssembler}, 
    VecAssems::Vector{VectorAssembler};
    qorder=3, Nfine=n‚Çö) where T<:MeshType    

    q,p = fespace
    n = size(Œ©.elems,1)
    K‚Çê, L‚Çê = MatAssems
    F‚Çê, = VecAssems
    for el=1:n
        # Get the start and last index of the patch
        start = (el-l)<1 ? 1 : el-l; last = start+2l
        last = (last>n) ? n : last; start = last-2l
        NÀ°K = Œ©[start:last]
        Œ©‚Çö = (NÀ°K.nds[1], NÀ°K.nds[end])
        elem = Œ©.nds[Œ©.elems[el,1]:Œ©.elems[el,2]]
        NÀ°K‚Çï = ùíØ(Œ©‚Çö, Nfine)
        V‚Çï·µñNÀ°K = L¬≤Conforming(NÀ°K, p); # Coarse Mesh
        H¬π‚ÇÄNÀ°K = H¬πConforming(NÀ°K‚Çï ,q, [1,n‚Çö+1]); # Fine Mesh
        function B‚Çñ(x,nds)
            a,b=nds
            xÃÇ = -(a+b)/(b-a) + 2/(b-a)*x
            (a ‚â§ x ‚â§ b) ? V‚Çï·µñNÀ°K.basis(xÃÇ) : zeros(Float64,V‚Çï·µñNÀ°K.p+1)
        end
        R = map(i->RÀ°‚Çï(x->B‚Çñ(x,elem)[i], A, (H¬π‚ÇÄNÀ°K, V‚Çï·µñNÀ°K), [K‚Çê,L‚Çê], [F‚Çê]; qorder=qorder),
                1:p+1)
        R‚Çõ[el] = R
    end
end

R‚Çõ = Vector{Vector{RÀ°‚Çï}}(undef,n)
compute_basis_functions!(R‚Çõ, Œ©, A, (q,p), [K‚Çê,L‚Çê], [F‚Çê]; qorder=10, Nfine=n‚Çö)
## Plot to verify the basis functions 
plt = plot()
el = 3; 
for local_basis = 1:p+1
    plot!(plt, R‚Çõ[el][local_basis].nds, R‚Çõ[el][local_basis].Œõ, 
    label="Element el="*string(el)*" Local Basis i="*string(local_basis), lw=2)    
end
xlims!(plt, (0,1))