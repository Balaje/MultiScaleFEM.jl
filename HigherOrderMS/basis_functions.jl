###################################################################################
# Functions to generate the basis functions for the functions spaces V‚Çï and V‚Çï·µñ(K)
# Here:
# 1) V‚Çï is the fine scale space (order q) - Lagrange basis functions
# 2) V‚Çï·µñ(K) is the L¬≤ space (order p) - Shifted Legendre polynomials
###################################################################################
"""
B‚Çñ is the Legendre polynomial with support K=(a,b)
"""
# Now to compute the new basis functions on a patch
function B‚Çñ(x,nds,V)
  a,b=nds
  xÃÇ = -(a+b)/(b-a) + 2/(b-a)*x
  (a ‚â§ x ‚â§ b) ? V.basis(xÃÇ) : zeros(Float64,V.p+1)
end
"""
Returns the projection of B‚Çñ on H¬π‚ÇÄ(D): RÀ°‚ÇïB‚Çñ
"""
function compute_basis_functions!(R‚Çõ::Matrix{RÀ°‚Çï},
  Œ©::T, A::Function, fespace, MatAssems::Vector{MatrixAssembler},
  VecAssems::Vector{VectorAssembler};
  qorder=3, Nfine=100) where T<:MeshType

  q,p = fespace
  n = size(Œ©.elems,1)
  K‚Çê, L‚Çê = MatAssems
  F‚Çê, = VecAssems
  for el=1:n
    # Get the start and last index of the patch
    start = (el-l)<1 ? 1 : el-l; last = start+2l
    last = (last>n) ? n : last; start = last-2l
    start = (start ‚â§ 0) ? 1 : start
    last = (last ‚â• n) ? n : last
    NÀ°K = Œ©[start:last]
    Œ©‚Çö = (NÀ°K.nds[1], NÀ°K.nds[end])
    elem = Œ©.nds[Œ©.elems[el,1]:Œ©.elems[el,2]]
    NÀ°K‚Çï = ùíØ(Œ©‚Çö, Nfine)
    V‚Çï·µñNÀ°K = L¬≤Conforming(NÀ°K, p); # Coarse Mesh
    H¬π‚ÇÄNÀ°K = H¬πConforming(NÀ°K‚Çï ,q, [1,(q*Nfine+1)]); # Fine Mesh
    for i=1:p+1
#      display(plot(LinRange(-1,1,800), map(x->B‚Çñ(x,elem,V‚Çï·µñNÀ°K)[p+1], LinRange(-1,1,800)), xlims=(0,1)))
#      sleep(0.5)
      R = RÀ°‚Çï(x->B‚Çñ(x,elem,V‚Çï·µñNÀ°K)[i], A, x->1.0, (H¬π‚ÇÄNÀ°K, V‚Çï·µñNÀ°K), [K‚Çê,L‚Çê], [F‚Çê]; qorder=qorder)
      R‚Çõ[i,el] = R
    end
  end
  R‚Çõ
end
