###################
### File eg2.jl ###
###################

# Include all the files.
include("meshes.jl");
include("assemblers.jl");
include("fespaces.jl");
include("basis_functions.jl")
include("local_matrix_vector.jl")
include("assemble_matrices.jl")

A(x) = @. 1; # Diffusion coefficient
n = 6; Nfine = 100; # Coarse and fine mesh size.
p = 1 # Polynomial orders for  L¬≤
q = 1 # Polynomial orders for H¬π

Œ© = ùíØ((0,1),n); # The full coarse mesh.

start=2; last=4;
NÀ°K = Œ©[start:last];# The submesh from element=start to element=last
V‚Çï·µñNÀ°K = L¬≤Conforming(NÀ°K, p); # The L¬≤Conforming space on the coarse mesh

Œ©‚Çö = (NÀ°K.nds[1], NÀ°K.nds[end]); # The submesh end points (defines the domain).
NÀ°K‚Çï = ùíØ(Œ©‚Çö, Nfine); # Construct the mesh on the patch.
H¬π‚ÇÄNÀ°K = H¬πConforming(NÀ°K‚Çï ,q, [1,(q*Nfine+1)]); # The H¬πConforming space on the fine mesh with Dirichlet boundary conditions

K‚Çê = MatrixAssembler(H¬πConformingSpace(), q, NÀ°K‚Çï.elems) # Construct the assembler for a(RÀ°‚ÇïŒõ‚Çñ,v)
L‚Çê = MatrixAssembler(H¬πConformingSpace(), L¬≤ConformingSpace(), (q,p), (NÀ°K‚Çï.elems, NÀ°K.elems)) # Construct the assembler for (v,Œª)
F‚Çê = VectorAssembler(L¬≤ConformingSpace(), p, NÀ°K.elems) # Construct the vector assembler for (Œõ‚Çñ,Œº)

# B‚Çñ is the Legendre polynomial with support K=(a,b)
function B‚Çñ(x,nds,V)
  a,b=nds
  xÃÇ = -(a+b)/(b-a) + 2/(b-a)*x
  (a ‚â§ x ‚â§ b) ? V.basis(xÃÇ) : zeros(Float64,V.p+1)
end

el = 3 # Element Index
local_basis = 1 # Local Basis Index 1:p+1
elem = Œ©.nds[Œ©.elems[el,1]:Œ©.elems[el,2]]; # Get the nodes of element 3.

# Solve the saddle point problem. (Found in fespaces.jl, line 100)
RÀ°‚ÇïŒõ‚Çñ = RÀ°‚Çï(x->B‚Çñ(x,elem,V‚Çï·µñNÀ°K)[local_basis], A, (H¬π‚ÇÄNÀ°K, V‚Çï·µñNÀ°K), [K‚Çê,L‚Çê], [F‚Çê]; qorder=4);
# @btime RÀ°‚Çï($(x->B‚Çñ(x,elem,V‚Çï·µñNÀ°K)[local_basis]), $A, $(H¬π‚ÇÄNÀ°K, V‚Çï·µñNÀ°K), $[K‚Çê,L‚Çê], $[F‚Çê]; qorder=$4);

using Plots
plt = plot(RÀ°‚ÇïŒõ‚Çñ.nds, RÀ°‚ÇïŒõ‚Çñ.Œõ, label="Basis 2 on element 3", lc=:blue, lw=2)

# Legendre Polynomials basis at the FE nodes
LP = map(y->B‚Çñ(y,elem,V‚Çï·µñNÀ°K)[local_basis], RÀ°‚ÇïŒõ‚Çñ.nds);

plot!(plt, RÀ°‚ÇïŒõ‚Çñ.nds, LP, label="Legendre Polynomial", lc=:red, lw=2)
plot!(plt, elem[1]:0.01:elem[2], 0*(elem[1]:0.01:elem[2]), label="Element 3", lc=:black, lw=4)
xlims!(plt,(0,1))

## Verify the projection of the MultiScale Basis on the element
function ŒõÃÉÀ°‚Çö(x, R::RÀ°‚Çï, V::A) where A <: H¬πConforming
  Œ© = V.trian
  p = V.p
  elem = Œ©.elems
  nds = Œ©.nds
  nel = size(elem,1)
  new_elem = _new_elem_matrices(elem, p, H¬πConformingSpace())
  for i=1:nel
    cs = nds[elem[i,:]]
    uh = R.Œõ[new_elem[i,:]]
    if(cs[1] ‚â§ x ‚â§ cs[2])
      xÃÇ = -(cs[1]+cs[2])/(cs[2]-cs[1]) + 2/(cs[2]-cs[1])*x
      return dot(uh,V.basis(xÃÇ))
    else
      continue
    end
  end
end
#plt1 = plot(RÀ°‚ÇïŒõ‚Çñ.nds, map(y->ŒõÃÉÀ°‚Çö(y, RÀ°‚ÇïŒõ‚Çñ, H¬π‚ÇÄNÀ°K), RÀ°‚ÇïŒõ‚Çñ.nds));
#plot!(plt1, RÀ°‚ÇïŒõ‚Çñ.nds, RÀ°‚ÇïŒõ‚Çñ.Œõ)

# L¬≤ inner-product of (RÀ°‚ÇïŒõ‚Çñ, Œº)
F‚ÇÄ = assemble_vector(V‚Çï·µñNÀ°K, F‚Çê, y->ŒõÃÉÀ°‚Çö(y, RÀ°‚ÇïŒõ‚Çñ, H¬π‚ÇÄNÀ°K); qorder=5)
# L¬≤ inner-product of(Œõ‚Çñ, Œº)
F‚ÇÅ = assemble_vector(V‚Çï·µñNÀ°K, F‚Çê, y->B‚Çñ(y, elem, V‚Çï·µñNÀ°K)[local_basis]; qorder=5)
# Check if they are equal in element el??
display(hcat(F‚ÇÄ, F‚ÇÅ))
#= 4.33681e-19   0.0
3.39256e-9    0.0
4.33681e-18   0.0
1.69628e-8    0.0
0.1           0.1
2.51535e-17  -2.25514e-17
-4.33681e-18   0.0
-1.69628e-8    0.0
3.27971e-18   0.0
-3.39256e-9    0.0 =#
